#BlueJ class context
comment0.params=
comment0.target=JSONArray()
comment0.text=\n\ Construct\ an\ empty\ JSONArray.\n
comment1.params=source
comment1.target=JSONArray(java.lang.String)
comment1.text=\n\ Construct\ a\ JSONArray\ from\ a\ source\ JSON\ text.\n\n\ @param\ source\n\ \ \ \ \ \ \ \ \ \ \ \ A\ string\ that\ begins\ with\ <code>[</code>&nbsp;<small>(left\n\ \ \ \ \ \ \ \ \ \ \ \ bracket)</small>\ and\ ends\ with\ <code>]</code>\n\ \ \ \ \ \ \ \ \ \ \ \ &nbsp;<small>(right\ bracket)</small>.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ a\ syntax\ error.\n
comment10.params=index
comment10.target=java.lang.String\ getString(int)
comment10.text=\n\ Get\ the\ string\ associated\ with\ an\ index.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ A\ string\ value.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ string\ value\ for\ the\ index.\n
comment11.params=index
comment11.target=boolean\ isNull(int)
comment11.text=\n\ Determine\ if\ the\ value\ is\ null.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ true\ if\ the\ value\ at\ the\ index\ is\ null,\ or\ if\ there\ is\ no\ value.\n
comment12.params=separator
comment12.target=java.lang.String\ join(java.lang.String)
comment12.text=\n\ Make\ a\ string\ from\ the\ contents\ of\ this\ JSONArray.\ The\n\ <code>separator</code>\ string\ is\ inserted\ between\ each\ element.\ Warning\:\n\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\n\n\ @param\ separator\n\ \ \ \ \ \ \ \ \ \ \ \ A\ string\ that\ will\ be\ inserted\ between\ the\ elements.\n\ @return\ a\ string.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ array\ contains\ an\ invalid\ number.\n
comment13.params=
comment13.target=int\ length()
comment13.text=\n\ Get\ the\ number\ of\ elements\ in\ the\ JSONArray,\ included\ nulls.\n\n\ @return\ The\ length\ (or\ size).\n
comment14.params=index
comment14.target=java.lang.Object\ opt(int)
comment14.text=\n\ Get\ the\ optional\ object\ value\ associated\ with\ an\ index.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ An\ object\ value,\ or\ null\ if\ there\ is\ no\ object\ at\ that\ index.\n
comment15.params=index
comment15.target=boolean\ optBoolean(int)
comment15.text=\n\ Get\ the\ optional\ boolean\ value\ associated\ with\ an\ index.\ It\ returns\ false\n\ if\ there\ is\ no\ value\ at\ that\ index,\ or\ if\ the\ value\ is\ not\ Boolean.TRUE\n\ or\ the\ String\ "true".\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ The\ truth.\n
comment16.params=index\ defaultValue
comment16.target=boolean\ optBoolean(int,\ boolean)
comment16.text=\n\ Get\ the\ optional\ boolean\ value\ associated\ with\ an\ index.\ It\ returns\ the\n\ defaultValue\ if\ there\ is\ no\ value\ at\ that\ index\ or\ if\ it\ is\ not\ a\ Boolean\n\ or\ the\ String\ "true"\ or\ "false"\ (case\ insensitive).\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @param\ defaultValue\n\ \ \ \ \ \ \ \ \ \ \ \ A\ boolean\ default.\n\ @return\ The\ truth.\n
comment17.params=index
comment17.target=double\ optDouble(int)
comment17.text=\n\ Get\ the\ optional\ double\ value\ associated\ with\ an\ index.\ NaN\ is\ returned\n\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\ number\ and\n\ cannot\ be\ converted\ to\ a\ number.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ The\ value.\n
comment18.params=index\ defaultValue
comment18.target=double\ optDouble(int,\ double)
comment18.text=\n\ Get\ the\ optional\ double\ value\ associated\ with\ an\ index.\ The\ defaultValue\n\ is\ returned\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\n\ number\ and\ cannot\ be\ converted\ to\ a\ number.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ subscript\n\ @param\ defaultValue\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\n\ @return\ The\ value.\n
comment19.params=index
comment19.target=int\ optInt(int)
comment19.text=\n\ Get\ the\ optional\ int\ value\ associated\ with\ an\ index.\ Zero\ is\ returned\ if\n\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\ number\ and\n\ cannot\ be\ converted\ to\ a\ number.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ The\ value.\n
comment2.params=collection
comment2.target=JSONArray(java.util.Collection)
comment2.text=\n\ Construct\ a\ JSONArray\ from\ a\ Collection.\n\n\ @param\ collection\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Collection.\n
comment20.params=index\ defaultValue
comment20.target=int\ optInt(int,\ int)
comment20.text=\n\ Get\ the\ optional\ int\ value\ associated\ with\ an\ index.\ The\ defaultValue\ is\n\ returned\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\n\ number\ and\ cannot\ be\ converted\ to\ a\ number.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @param\ defaultValue\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\n\ @return\ The\ value.\n
comment21.params=index
comment21.target=org.json.JSONArray\ optJSONArray(int)
comment21.text=\n\ Get\ the\ optional\ JSONArray\ associated\ with\ an\ index.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ subscript\n\ @return\ A\ JSONArray\ value,\ or\ null\ if\ the\ index\ has\ no\ value,\ or\ if\ the\n\ \ \ \ \ \ \ \ \ value\ is\ not\ a\ JSONArray.\n
comment22.params=index
comment22.target=long\ optLong(int)
comment22.text=\n\ Get\ the\ optional\ long\ value\ associated\ with\ an\ index.\ Zero\ is\ returned\ if\n\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\ number\ and\n\ cannot\ be\ converted\ to\ a\ number.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ The\ value.\n
comment23.params=index\ defaultValue
comment23.target=long\ optLong(int,\ long)
comment23.text=\n\ Get\ the\ optional\ long\ value\ associated\ with\ an\ index.\ The\ defaultValue\ is\n\ returned\ if\ there\ is\ no\ value\ for\ the\ index,\ or\ if\ the\ value\ is\ not\ a\n\ number\ and\ cannot\ be\ converted\ to\ a\ number.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @param\ defaultValue\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\n\ @return\ The\ value.\n
comment24.params=index
comment24.target=java.lang.String\ optString(int)
comment24.text=\n\ Get\ the\ optional\ string\ value\ associated\ with\ an\ index.\ It\ returns\ an\n\ empty\ string\ if\ there\ is\ no\ value\ at\ that\ index.\ If\ the\ value\ is\ not\ a\n\ string\ and\ is\ not\ null,\ then\ it\ is\ coverted\ to\ a\ string.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ A\ String\ value.\n
comment25.params=index\ defaultValue
comment25.target=java.lang.String\ optString(int,\ java.lang.String)
comment25.text=\n\ Get\ the\ optional\ string\ associated\ with\ an\ index.\ The\ defaultValue\ is\n\ returned\ if\ the\ key\ is\ not\ found.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @param\ defaultValue\n\ \ \ \ \ \ \ \ \ \ \ \ The\ default\ value.\n\ @return\ A\ String\ value.\n
comment26.params=value
comment26.target=org.json.JSONArray\ put(boolean)
comment26.text=\n\ Append\ a\ boolean\ value.\ This\ increases\ the\ array's\ length\ by\ one.\n\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ boolean\ value.\n\ @return\ this.\n
comment27.params=value
comment27.target=org.json.JSONArray\ put(java.util.Collection)
comment27.text=\n\ Put\ a\ value\ in\ the\ JSONArray,\ where\ the\ value\ will\ be\ a\ JSONArray\ which\n\ is\ produced\ from\ a\ Collection.\n\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Collection\ value.\n\ @return\ this.\n
comment28.params=value
comment28.target=org.json.JSONArray\ put(double)
comment28.text=\n\ Append\ a\ double\ value.\ This\ increases\ the\ array's\ length\ by\ one.\n\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ double\ value.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ value\ is\ not\ finite.\n\ @return\ this.\n
comment29.params=value
comment29.target=org.json.JSONArray\ put(int)
comment29.text=\n\ Append\ an\ int\ value.\ This\ increases\ the\ array's\ length\ by\ one.\n\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ An\ int\ value.\n\ @return\ this.\n
comment3.params=array
comment3.target=JSONArray(java.lang.Object)
comment3.text=\n\ Construct\ a\ JSONArray\ from\ an\ array\n\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ not\ an\ array.\n
comment30.params=value
comment30.target=org.json.JSONArray\ put(long)
comment30.text=\n\ Append\ an\ long\ value.\ This\ increases\ the\ array's\ length\ by\ one.\n\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ long\ value.\n\ @return\ this.\n
comment31.params=value
comment31.target=org.json.JSONArray\ put(java.util.Map)
comment31.text=\n\ Put\ a\ value\ in\ the\ JSONArray,\ where\ the\ value\ will\ be\ a\ JSONObject\ which\n\ is\ produced\ from\ a\ Map.\n\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Map\ value.\n\ @return\ this.\n
comment32.params=value
comment32.target=org.json.JSONArray\ put(java.lang.Object)
comment32.text=\n\ Append\ an\ object\ value.\ This\ increases\ the\ array's\ length\ by\ one.\n\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ An\ object\ value.\ The\ value\ should\ be\ a\ Boolean,\ Double,\n\ \ \ \ \ \ \ \ \ \ \ \ Integer,\ JSONArray,\ JSONObject,\ Long,\ or\ String,\ or\ the\n\ \ \ \ \ \ \ \ \ \ \ \ JSONObject.NULL\ object.\n\ @return\ this.\n
comment33.params=index\ value
comment33.target=org.json.JSONArray\ put(int,\ boolean)
comment33.text=\n\ Put\ or\ replace\ a\ boolean\ value\ in\ the\ JSONArray.\ If\ the\ index\ is\ greater\n\ than\ the\ length\ of\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\n\ necessary\ to\ pad\ it\ out.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ boolean\ value.\n\ @return\ this.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative.\n
comment34.params=index\ value
comment34.target=org.json.JSONArray\ put(int,\ java.util.Collection)
comment34.text=\n\ Put\ a\ value\ in\ the\ JSONArray,\ where\ the\ value\ will\ be\ a\ JSONArray\ which\n\ is\ produced\ from\ a\ Collection.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ Collection\ value.\n\ @return\ this.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative\ or\ if\ the\ value\ is\ not\ finite.\n
comment35.params=index\ value
comment35.target=org.json.JSONArray\ put(int,\ double)
comment35.text=\n\ Put\ or\ replace\ a\ double\ value.\ If\ the\ index\ is\ greater\ than\ the\ length\ of\n\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\ necessary\ to\ pad\ it\n\ out.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ double\ value.\n\ @return\ this.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative\ or\ if\ the\ value\ is\ not\ finite.\n
comment36.params=index\ value
comment36.target=org.json.JSONArray\ put(int,\ int)
comment36.text=\n\ Put\ or\ replace\ an\ int\ value.\ If\ the\ index\ is\ greater\ than\ the\ length\ of\n\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\ necessary\ to\ pad\ it\n\ out.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ An\ int\ value.\n\ @return\ this.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative.\n
comment37.params=index\ value
comment37.target=org.json.JSONArray\ put(int,\ long)
comment37.text=\n\ Put\ or\ replace\ a\ long\ value.\ If\ the\ index\ is\ greater\ than\ the\ length\ of\n\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\ necessary\ to\ pad\ it\n\ out.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ A\ long\ value.\n\ @return\ this.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative.\n
comment38.params=index\ value
comment38.target=org.json.JSONArray\ put(int,\ java.util.Map)
comment38.text=\n\ Put\ a\ value\ in\ the\ JSONArray,\ where\ the\ value\ will\ be\ a\ JSONObject\ that\n\ is\ produced\ from\ a\ Map.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ The\ Map\ value.\n\ @return\ this.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative\ or\ if\ the\ the\ value\ is\ an\ invalid\n\ \ \ \ \ \ \ \ \ \ \ \ \ number.\n
comment39.params=index\ value
comment39.target=org.json.JSONArray\ put(int,\ java.lang.Object)
comment39.text=\n\ Put\ or\ replace\ an\ object\ value\ in\ the\ JSONArray.\ If\ the\ index\ is\ greater\n\ than\ the\ length\ of\ the\ JSONArray,\ then\ null\ elements\ will\ be\ added\ as\n\ necessary\ to\ pad\ it\ out.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ subscript.\n\ @param\ value\n\ \ \ \ \ \ \ \ \ \ \ \ The\ value\ to\ put\ into\ the\ array.\ The\ value\ should\ be\ a\n\ \ \ \ \ \ \ \ \ \ \ \ Boolean,\ Double,\ Integer,\ JSONArray,\ JSONObject,\ Long,\ or\n\ \ \ \ \ \ \ \ \ \ \ \ String,\ or\ the\ JSONObject.NULL\ object.\n\ @return\ this.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ index\ is\ negative\ or\ if\ the\ the\ value\ is\ an\ invalid\n\ \ \ \ \ \ \ \ \ \ \ \ \ number.\n
comment4.params=index
comment4.target=java.lang.Object\ get(int)
comment4.text=\n\ Get\ the\ object\ value\ associated\ with\ an\ index.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ An\ object\ value.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ value\ for\ the\ index.\n
comment40.params=index
comment40.target=java.lang.Object\ remove(int)
comment40.text=\n\ Remove\ an\ index\ and\ close\ the\ hole.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ of\ the\ element\ to\ be\ removed.\n\ @return\ The\ value\ that\ was\ associated\ with\ the\ index,\ or\ null\ if\ there\n\ \ \ \ \ \ \ \ \ was\ no\ value.\n
comment41.params=other
comment41.target=boolean\ similar(java.lang.Object)
comment41.text=\n\ Determine\ if\ two\ JSONArrays\ are\ similar.\n\ They\ must\ contain\ similar\ sequences.\n\n\ @param\ other\ The\ other\ JSONArray\n\ @return\ true\ if\ they\ are\ equal\n
comment42.params=
comment42.target=java.lang.String\ toString()
comment42.text=\n\ Make\ a\ JSON\ text\ of\ this\ JSONArray.\ For\ compactness,\ no\ unnecessary\n\ whitespace\ is\ added.\ If\ it\ is\ not\ possible\ to\ produce\ a\ syntactically\n\ correct\ JSON\ text\ then\ null\ will\ be\ returned\ instead.\ This\ could\ occur\ if\n\ the\ array\ contains\ an\ invalid\ number.\n\ <p>\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\n\n\ @return\ a\ printable,\ displayable,\ transmittable\ representation\ of\ the\n\ \ \ \ \ \ \ \ \ array.\n
comment43.params=indentFactor
comment43.target=java.lang.String\ toString(int)
comment43.text=\n\ Make\ a\ prettyprinted\ JSON\ text\ of\ this\ JSONArray.\ Warning\:\ This\ method\n\ assumes\ that\ the\ data\ structure\ is\ acyclical.\n\n\ @param\ indentFactor\n\ \ \ \ \ \ \ \ \ \ \ \ The\ number\ of\ spaces\ to\ add\ to\ each\ level\ of\ indentation.\n\ @return\ a\ printable,\ displayable,\ transmittable\ representation\ of\ the\n\ \ \ \ \ \ \ \ \ object,\ beginning\ with\ <code>[</code>&nbsp;<small>(left\n\ \ \ \ \ \ \ \ \ bracket)</small>\ and\ ending\ with\ <code>]</code>\n\ \ \ \ \ \ \ \ \ &nbsp;<small>(right\ bracket)</small>.\n\ @throws\ JSONException\n
comment44.params=writer
comment44.target=java.io.Writer\ write(java.io.Writer)
comment44.text=\n\ Write\ the\ contents\ of\ the\ JSONArray\ as\ JSON\ text\ to\ a\ writer.\ For\n\ compactness,\ no\ whitespace\ is\ added.\n\ <p>\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\n\n\ @return\ The\ writer.\n\ @throws\ JSONException\n
comment45.params=writer\ indentFactor\ indent
comment45.target=java.io.Writer\ write(java.io.Writer,\ int,\ int)
comment45.text=\n\ Write\ the\ contents\ of\ the\ JSONArray\ as\ JSON\ text\ to\ a\ writer.\ For\n\ compactness,\ no\ whitespace\ is\ added.\n\ <p>\n\ Warning\:\ This\ method\ assumes\ that\ the\ data\ structure\ is\ acyclical.\n\n\ @param\ indentFactor\n\ \ \ \ \ \ \ \ \ \ \ \ The\ number\ of\ spaces\ to\ add\ to\ each\ level\ of\ indentation.\n\ @param\ indent\n\ \ \ \ \ \ \ \ \ \ \ \ The\ indention\ of\ the\ top\ level.\n\ @return\ The\ writer.\n\ @throws\ JSONException\n
comment5.params=index
comment5.target=boolean\ getBoolean(int)
comment5.text=\n\ Get\ the\ boolean\ value\ associated\ with\ an\ index.\ The\ string\ values\ "true"\n\ and\ "false"\ are\ converted\ to\ boolean.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ The\ truth.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ value\ for\ the\ index\ or\ if\ the\ value\ is\ not\n\ \ \ \ \ \ \ \ \ \ \ \ \ convertible\ to\ boolean.\n
comment6.params=index
comment6.target=double\ getDouble(int)
comment6.text=\n\ Get\ the\ double\ value\ associated\ with\ an\ index.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ The\ value.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ a\ number.\n
comment7.params=index
comment7.target=int\ getInt(int)
comment7.text=\n\ Get\ the\ int\ value\ associated\ with\ an\ index.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ The\ value.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ not\ found\ or\ if\ the\ value\ is\ not\ a\ number.\n
comment8.params=index
comment8.target=org.json.JSONArray\ getJSONArray(int)
comment8.text=\n\ Get\ the\ JSONArray\ associated\ with\ an\ index.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ A\ JSONArray\ value.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ there\ is\ no\ value\ for\ the\ index.\ or\ if\ the\ value\ is\ not\ a\n\ \ \ \ \ \ \ \ \ \ \ \ \ JSONArray\n
comment9.params=index
comment9.target=long\ getLong(int)
comment9.text=\n\ Get\ the\ long\ value\ associated\ with\ an\ index.\n\n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ must\ be\ between\ 0\ and\ length()\ -\ 1.\n\ @return\ The\ value.\n\ @throws\ JSONException\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ the\ key\ is\ not\ found\ or\ if\ the\ value\ cannot\ be\ converted\n\ \ \ \ \ \ \ \ \ \ \ \ \ to\ a\ number.\n
numComments=46
